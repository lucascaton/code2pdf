#!/usr/bin/ruby
#
# code2pdf
# Created by Lucas Caton at 2011, may 31
# Forked and Edited by Victor Hugo Souza at 2011, Jun 22

require 'optparse'
require 'yaml'
require 'rubygems'
require 'coderay'
require 'code2pdf/convert_to_pdf'

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: code2pdf <project path> <blacklist file>\n\nYou can use flags as such:"

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end

  if ARGV.size < 2
    puts opts
    exit
  end
end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  puts e
  exit
end

PATH = ARGV[0].gsub(/\/$/, '')

# Check if path exists
if !File.exists?(PATH) || FileTest.file?(PATH)
  puts "'#{PATH}' path does not exist or it is not a directory."
  exit
end

BLACK_LIST_YML_FILE = ARGV[1]

# Check if blacklist file exists
if !File.exists?(BLACK_LIST_YML_FILE) || FileTest.directory?(BLACK_LIST_YML_FILE)
  puts "'#{BLACK_LIST_YML_FILE}' file does not exist or it is not a regular file."
  exit
end

BLACK_LIST = YAML.load File.read(BLACK_LIST_YML_FILE)

# Check if blacklist file has directories and files keys
if !BLACK_LIST.keys.include?(:directories) || !BLACK_LIST.keys.include?(:files)
  puts "'#{BLACK_LIST_YML_FILE}' file has no directories and files keys."
  exit
end

BLACK_LIST_DIRECTORIES = BLACK_LIST[:directories].map {|directory| "#{PATH}/#{directory}"}
BLACK_LIST_FILES = BLACK_LIST[:files]

@code_files = []

# Read code files from path
def read_code_files_from_path(path)
  Dir.foreach path do |it|
    path_and_name = "#{path}/#{it}"
    if FileTest.directory?(path_and_name) && it != '.' && it != '..'
      read_code_files_from_path path_and_name unless BLACK_LIST_DIRECTORIES.include? path_and_name
    elsif FileTest.file?(path_and_name) && !BLACK_LIST_FILES.include?(it)
      puts "Processing => #{path_and_name}"
      file = `coderay #{path_and_name}`
      @code_files << [path_and_name, file]
    end
  end
end

read_code_files_from_path PATH

# Convert to PDF
puts "\n\nConverting to PDF..."
filename = PATH.gsub(/(\.|\/)/, '_')
pdf = ConvertToPDF.new "#{filename}.pdf", @code_files
pdf.pdf
